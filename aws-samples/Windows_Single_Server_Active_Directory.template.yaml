AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a single server installation of Active Directory.
  Domain Administrator password will be the one retrieved from the instance. For adding
  members to the domain, ensure that they are launched in domain member security group
  created by this template and then configure them to use this instance's private
  IP as the DNS server. **WARNING** This template creates Amazon EC2 Windows instance
  and related resources. You will be billed for the AWS resources used if you create
  a stack from this template.
Mappings:
  AWSRegion2AMI:
    ap-northeast-1:
      Windows2008r2: ami-afdd28c9
      Windows2012r2: ami-c229dfa4
    ap-northeast-2:
      Windows2008r2: ami-2141984f
      Windows2012r2: ami-098a5267
    ap-south-1:
      Windows2008r2: ami-6a710b05
      Windows2012r2: ami-82fe84ed
    ap-southeast-1:
      Windows2008r2: ami-6bc35808
      Windows2012r2: ami-c87c19ab
    ap-southeast-2:
      Windows2008r2: ami-40a8b123
      Windows2012r2: ami-46f1e925
    ca-central-1:
      Windows2008r2: ami-4bcb752f
      Windows2012r2: ami-20b50b44
    cn-north-1:
      Windows2008r2: ami-3bac7c56
      Windows2012r2: ami-a0d909cd
    eu-central-1:
      Windows2008r2: ami-91e940fe
      Windows2012r2: ami-8306afec
    eu-west-1:
      Windows2008r2: ami-d3b040aa
      Windows2012r2: ami-6dd02214
    eu-west-2:
      Windows2008r2: ami-b3e6f7d7
      Windows2012r2: ami-fc8e9f98
    sa-east-1:
      Windows2008r2: ami-5fceb833
      Windows2012r2: ami-f0b4c59c
    us-east-1:
      Windows2008r2: ami-cf644fb4
      Windows2012r2: ami-c6e9d9bd
    us-east-2:
      Windows2008r2: ami-17ab8b72
      Windows2012r2: ami-5d99b938
    us-west-1:
      Windows2008r2: ami-d5ddf6b5
      Windows2012r2: ami-c52d07a5
    us-west-2:
      Windows2008r2: ami-6763831f
      Windows2012r2: ami-3c4ba944
Outputs:
  DomainAdmin:
    Description: Default domain administrator account
    Value:
      Fn::Join:
      - ''
      - - Ref: DomainNetBIOSName
        - \Administrator
  DomainAdminPassword:
    Value: Please retrieve Administrator password of the instance
  DomainControllerDNSName:
    Description: Public DNS name of Active Directory server for RDP connection
    Value:
      Fn::GetAtt:
      - DomainController
      - PublicDnsName
  DomainControllerIP:
    Description: Private IP address of Active Directory server which is also a DNS
      server
    Value:
      Fn::GetAtt:
      - DomainController
      - PrivateIp
Parameters:
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Description: Fully qualified domain name (FQDN) of the forest root domain e.g.
      corp.example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Description: NetBIOS name of the domain (upto 15 characters) for users of earlier
      versions of Windows e.g. CORP
    MaxLength: '15'
    MinLength: '1'
    Type: String
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m4.large
    Description: Amazon EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  RestoreModePassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for a separate Administrator account when the domain controller
      is in Restore Mode. Must be at least 8 characters containing letters, numbers
      and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'True'
    Type: String
  SourceCidrForRDP:
    AllowedPattern: ^([0-9]+\.){3}[0-9]+\/[0-9]+$
    Description: IP Cidr from which you are likely to RDP into the instances. You
      can add rules later by modifying the created security groups e.g. 54.32.98.160/32
    MaxLength: '18'
    MinLength: '9'
    Type: String
Resources:
  DomainController:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            1-run-dcpromo:
              command:
                Fn::Join:
                - ''
                - - 'C:\cfn\RunCommand.bat "dcpromo /unattend  /ReplicaOrNewDomain:Domain  /NewDomain:Forest  /NewDomainDNSName:'
                  - Ref: DomainDNSName
                  - '  /ForestLevel:4 /DomainNetbiosName:'
                  - Ref: DomainNetBIOSName
                  - ' /DomainLevel:4  /InstallDNS:Yes  /ConfirmGc:Yes  /CreateDNSDelegation:No  /DatabasePath:"C:\Windows\NTDS"  /LogPath:"C:\Windows\NTDS"  /SYSVOLPath:"C:\Windows\SYSVOL"
                    /SafeModeAdminPassword='
                  - Ref: RestoreModePassword
                  - ' /RebootOnCompletion:Yes"'
              waitAfterCompletion: forever
            2-signal-success:
              command:
                Fn::Join:
                - ''
                - - cfn-signal.exe -e 0 "
                  - Fn::Base64:
                      Ref: DomainControllerWaitHandle
                  - '"'
          files:
            C:\cfn\RunCommand.bat:
              content: '%~1

                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )'
            c:\cfn\cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.DomainController.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=cfn-init.exe -v -s '
                  - Ref: AWS::StackId
                  - ' -r DomainController'
                  - ' --region '
                  - Ref: AWS::Region
                  - '

                    '
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegion2AMI
        - Ref: AWS::Region
        - Windows2008r2
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: DomainControllerSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '<script>

              '
            - 'cfn-init.exe -v -s '
            - Ref: AWS::StackId
            - ' -r DomainController '
            - ' --region '
            - Ref: AWS::Region
            - '

              '
            - </script>
    Type: AWS::EC2::Instance
  DomainControllerSecurityGroup:
    Properties:
      GroupDescription: Domain Controller
      SecurityGroupIngress:
      - FromPort: '123'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '123'
      - FromPort: '135'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '135'
      - FromPort: '138'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '138'
      - FromPort: '1024'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '65535'
      - FromPort: '389'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '389'
      - FromPort: '389'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '389'
      - FromPort: '636'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '636'
      - FromPort: '3268'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '3268'
      - FromPort: '3269'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '3269'
      - FromPort: '53'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '53'
      - FromPort: '53'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '53'
      - FromPort: '88'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '88'
      - FromPort: '88'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '88'
      - FromPort: '445'
        IpProtocol: tcp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '445'
      - FromPort: '445'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '445'
      - FromPort: '135'
        IpProtocol: udp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '135'
      - CidrIp:
          Ref: SourceCidrForRDP
        FromPort: '3389'
        IpProtocol: tcp
        ToPort: '3389'
      - FromPort: '-1'
        IpProtocol: icmp
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
        ToPort: '-1'
    Type: AWS::EC2::SecurityGroup
  DomainControllerWaitCondition:
    DependsOn: DomainController
    Properties:
      Handle:
        Ref: DomainControllerWaitHandle
      Timeout: '1500'
    Type: AWS::CloudFormation::WaitCondition
  DomainControllerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  DomainMemberSecurityGroup:
    Properties:
      GroupDescription: Domain Members
      SecurityGroupIngress: []
    Type: AWS::EC2::SecurityGroup
  DomainMemberSecurityGroupIngress1:
    Properties:
      CidrIp:
        Ref: SourceCidrForRDP
      FromPort: '3389'
      GroupName:
        Ref: DomainMemberSecurityGroup
      IpProtocol: tcp
      ToPort: '3389'
    Type: AWS::EC2::SecurityGroupIngress
