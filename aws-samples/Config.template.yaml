AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template Config: This template demonstrates
  the usage of AWS Config resources.  **WARNING** You will be billed for the AWS resources
  used if you create a stack from this template.'
Outputs:
  ConfigRuleForVolumeAutoEnableIOComplianceType:
    Value:
      Fn::GetAtt:
      - ConfigRuleForVolumeAutoEnableIO
      - Compliance.Type
  ConfigRuleForVolumeTagsArn:
    Value:
      Fn::GetAtt:
      - ConfigRuleForVolumeTags
      - Arn
  ConfigRuleForVolumeTagsConfigRuleId:
    Value:
      Fn::GetAtt:
      - ConfigRuleForVolumeTags
      - ConfigRuleId
Parameters:
  Ec2VolumeAutoEnableIO:
    AllowedValues:
    - 'false'
    - 'true'
    Default: 'false'
    Type: String
  Ec2VolumeTagKey:
    Default: CostCenter
    Type: String
Resources:
  ConfigBucket:
    Type: AWS::S3::Bucket
  ConfigPermissionToCallLambda:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - VolumeAutoEnableIOComplianceCheck
        - Arn
      Principal: config.amazonaws.com
    Type: AWS::Lambda::Permission
  ConfigRecorder:
    Properties:
      Name: default
      RecordingGroup:
        ResourceTypes:
        - AWS::EC2::Volume
      RoleARN:
        Fn::GetAtt:
        - ConfigRole
        - Arn
    Type: AWS::Config::ConfigurationRecorder
  ConfigRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - config.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      Policies:
      - PolicyDocument:
          Statement:
          - Action: s3:GetBucketAcl
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ConfigBucket
          - Action: s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ConfigBucket
                - /AWSLogs/
                - Ref: AWS::AccountId
                - /*
          - Action: config:Put*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  ConfigRuleForVolumeAutoEnableIO:
    DependsOn:
    - ConfigPermissionToCallLambda
    - ConfigRecorder
    Properties:
      ConfigRuleName: ConfigRuleForVolumeAutoEnableIO
      Scope:
        ComplianceResourceId:
          Ref: Ec2Volume
        ComplianceResourceTypes:
        - AWS::EC2::Volume
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          Fn::GetAtt:
          - VolumeAutoEnableIOComplianceCheck
          - Arn
    Type: AWS::Config::ConfigRule
  ConfigRuleForVolumeTags:
    DependsOn: ConfigRecorder
    Properties:
      InputParameters:
        tag1Key: CostCenter
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
    Type: AWS::Config::ConfigRule
  ConfigTopic:
    Type: AWS::SNS::Topic
  ConfigTopicPolicy:
    Properties:
      PolicyDocument:
        Id: ConfigTopicPolicy
        Statement:
        - Action: SNS:Publish
          Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Resource: '*'
        Version: '2012-10-17'
      Topics:
      - Ref: ConfigTopic
    Type: AWS::SNS::TopicPolicy
  DeliveryChannel:
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName:
        Ref: ConfigBucket
      SnsTopicARN:
        Ref: ConfigTopic
    Type: AWS::Config::DeliveryChannel
  Ec2Volume:
    Properties:
      AutoEnableIO:
        Ref: Ec2VolumeAutoEnableIO
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      Size: '5'
      Tags:
      - Key:
          Ref: Ec2VolumeTagKey
        Value: Ec2VolumeTagValue
    Type: AWS::EC2::Volume
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:*
            - config:PutEvaluations
            - ec2:DescribeVolumeAttribute
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  VolumeAutoEnableIOComplianceCheck:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - var aws  = require('aws-sdk');
            - var config = new aws.ConfigService();
            - var ec2 = new aws.EC2();
            - exports.handler = function(event, context) {
            - '    compliance = evaluateCompliance(event, function(compliance, event)
              {'
            - '        var configurationItem = JSON.parse(event.invokingEvent).configurationItem;'
            - '        var putEvaluationsRequest = {'
            - '            Evaluations: [{'
            - '                ComplianceResourceType: configurationItem.resourceType,'
            - '                ComplianceResourceId: configurationItem.resourceId,'
            - '                ComplianceType: compliance,'
            - '                OrderingTimestamp: configurationItem.configurationItemCaptureTime'
            - '            }],'
            - '            ResultToken: event.resultToken'
            - '        };'
            - '        config.putEvaluations(putEvaluationsRequest, function(err,
              data) {'
            - '            if (err) context.fail(err);'
            - '            else context.succeed(data);'
            - '        });'
            - '    });'
            - '};'
            - function evaluateCompliance(event, doReturn) {
            - '    var configurationItem = JSON.parse(event.invokingEvent).configurationItem;'
            - '    var status = configurationItem.configurationItemStatus;'
            - '    if (configurationItem.resourceType !== ''AWS::EC2::Volume'' ||
              event.eventLeftScope || (status !== ''OK'' && status !== ''ResourceDiscovered''))'
            - '        doReturn(''NOT_APPLICABLE'', event);'
            - '    else ec2.describeVolumeAttribute({VolumeId: configurationItem.resourceId,
              Attribute: ''autoEnableIO''}, function(err, data) {'
            - '        if (err) context.fail(err);'
            - '        else if (data.AutoEnableIO.Value) doReturn(''COMPLIANT'', event);'
            - '        else doReturn(''NON_COMPLIANT'', event);'
            - '    });'
            - '}'
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs
      Timeout: '30'
    Type: AWS::Lambda::Function
