AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template OpsWorksVPCELB: Launches OpsWorks
  stack, layer, instances and associated resources to run a PHP application. The application
  runs inside an Amazon VPC and uses ELB to load balance ** This template creates
  one or more Amazon EC2 instances. You will be billed for the AWS resources used
  if you create a stack from this template.'
Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.small:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: PV64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    m1.large:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.small:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m3.2xlarge:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    t1.micro:
      Arch: NATPV64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSNATRegionArch2AMI:
    ap-northeast-1:
      NATHVM64: ami-2443b745
      NATPV64: ami-c7e016c7
    ap-northeast-2:
      NATHVM64: ami-d14388bf
      NATPV64: NOT_SUPPORTED
    ap-south-1:
      NATHVM64: ami-e2b9d38d
      NATPV64: NOT_SUPPORTED
    ap-southeast-1:
      NATHVM64: ami-a79b49c4
      NATPV64: ami-b098a9e2
    ap-southeast-2:
      NATHVM64: ami-53371f30
      NATPV64: ami-0fed9d35
    ca-central-1:
      NATHVM64: ami-32f14356
      NATPV64: NOT_SUPPORTED
    cn-north-1:
      NATHVM64: ami-7b549e16
      NATPV64: ami-bc3fad85
    eu-central-1:
      NATHVM64: ami-5825cd37
      NATPV64: ami-3604392b
    eu-west-1:
      NATHVM64: ami-a8dd45db
      NATPV64: ami-cb7de3bc
    eu-west-2:
      NATHVM64: ami-6b4d470f
      NATPV64: NOT_SUPPORTED
    sa-east-1:
      NATHVM64: ami-9336bcff
      NATPV64: ami-93fb408e
    us-east-1:
      NATHVM64: ami-4868ab25
      NATPV64: ami-c02b04a8
    us-east-2:
      NATHVM64: ami-92a6fef7
      NATPV64: NOT_SUPPORTED
    us-west-1:
      NATHVM64: ami-004b0f60
      NATPV64: ami-67a54423
    us-west-2:
      NATHVM64: ami-a275b1c2
      NATPV64: ami-2dae821d
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-374db956
      HVMG2: ami-d95aabbf
      PV64: ami-3e42b65f
    ap-northeast-2:
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-ffbdd790
      HVMG2: ami-f4cdb79b
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-a59b49c6
      HVMG2: ami-15660276
      PV64: ami-df9e4cbc
    ap-southeast-2:
      HVM64: ami-dc361ebf
      HVMG2: ami-0b5a4168
      PV64: ami-63351d00
    ca-central-1:
      HVM64: ami-730ebd17
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
      PV64: ami-77559f1a
    eu-central-1:
      HVM64: ami-ea26ce85
      HVMG2: ami-40b8102f
      PV64: ami-6527cf0a
    eu-west-1:
      HVM64: ami-f9dd458a
      HVMG2: ami-aedb26d7
      PV64: ami-4cdd453f
    eu-west-2:
      HVM64: ami-886369ec
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
      PV64: ami-1ad34676
    us-east-1:
      HVM64: ami-6869aa05
      HVMG2: ami-22b68b59
      PV64: ami-2a69aa47
    us-east-2:
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-31490d51
      HVMG2: ami-cfe5cfaf
      PV64: ami-a2490dc2
    us-west-2:
      HVM64: ami-7172b611
      HVMG2: ami-be4ea3c6
      PV64: ami-7f77b31f
  Region2Principal:
    ap-northeast-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-northeast-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-south-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-southeast-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-southeast-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ca-central-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    cn-north-1:
      EC2Principal: ec2.amazonaws.com.cn
      OpsWorksPrincipal: opsworks.amazonaws.com.cn
    eu-central-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    sa-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-east-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-west-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-west-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
  SubnetConfig:
    Private:
      CIDR: 10.0.1.0/24
    Public:
      CIDR: 10.0.0.0/24
    VPC:
      CIDR: 10.0.0.0/16
Outputs:
  AppId:
    Description: Application Id of newly created OpsWorks application
    Value:
      Ref: OpsWorksApp
  StackId:
    Description: Stack Id of newly created OpsWorks stack
    Value:
      Ref: OpsWorksStack
  URL:
    Description: URL for newly created application
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ELB
          - DNSName
  VPC:
    Description: VPC Id of newly created Virtual Private Cloud
    Value:
      Ref: VPC
Resources:
  ELB:
    Properties:
      CrossZone: 'true'
      HealthCheck:
        HealthyThreshold: '3'
        Interval: '90'
        Target: HTTP:80/
        Timeout: '60'
        UnhealthyThreshold: '5'
      Listeners:
      - InstancePort: '80'
        LoadBalancerPort: '80'
        Protocol: HTTP
      SecurityGroups:
      - Ref: ELBSecurityGroup
      Subnets:
      - Ref: PublicSubnet
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  ELBAttachment:
    Properties:
      ElasticLoadBalancerName:
        Ref: ELB
      LayerId:
        Ref: OpsWorksLayer
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
  ELBSecurityGroup:
    Properties:
      GroupDescription: Allow inbound access to the ELB
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  InboundEphemeralPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '103'
    Type: AWS::EC2::NetworkAclEntry
  InboundHTTPPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  InboundHTTPSPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  InboundPrivateNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PrivateNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  InboundSSHPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  InternetGateway:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
    Type: AWS::EC2::InternetGateway
  NATDevice:
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSNATRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2NATArch
          - t2.small
          - Arch
      InstanceType: t2.small
      SecurityGroupIds:
      - Ref: NATSecurityGroup
      SourceDestCheck: 'false'
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::Instance
  NATIPAddress:
    Properties:
      Domain: vpc
      InstanceId:
        Ref: NATDevice
    Type: AWS::EC2::EIP
  NATSecurityGroup:
    Properties:
      GroupDescription: Allow OpsWorks instances to access the NAT Device
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '9418'
        IpProtocol: tcp
        ToPort: '9418'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: OpsWorksSecurityGroup
        ToPort: '80'
      - FromPort: '9418'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: OpsWorksSecurityGroup
        ToPort: '9418'
      - FromPort: '443'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: OpsWorksSecurityGroup
        ToPort: '443'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  OpsWorksApp:
    Properties:
      AppSource:
        Revision: version1
        Type: git
        Url: git://github.com/amazonwebservices/opsworks-demo-php-simple-app.git
      Attributes:
        DocumentRoot: ' '
      Name: MyPHPApp
      StackId:
        Ref: OpsWorksStack
      Type: php
    Type: AWS::OpsWorks::App
  OpsWorksInstance1:
    Properties:
      InstanceType: t2.small
      LayerIds:
      - Ref: OpsWorksLayer
      RootDeviceType: ebs
      StackId:
        Ref: OpsWorksStack
    Type: AWS::OpsWorks::Instance
  OpsWorksInstance2:
    Properties:
      InstanceType: t2.small
      LayerIds:
      - Ref: OpsWorksLayer
      RootDeviceType: ebs
      StackId:
        Ref: OpsWorksStack
    Type: AWS::OpsWorks::Instance
  OpsWorksInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: OpsWorksInstanceRole
    Type: AWS::IAM::InstanceProfile
  OpsWorksInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - Region2Principal
              - Ref: AWS::Region
              - EC2Principal
      Path: /
    Type: AWS::IAM::Role
  OpsWorksLayer:
    DependsOn:
    - NATIPAddress
    - PublicRoute
    - PublicSubnetRouteTableAssociation
    - PrivateRoute
    - PrivateSubnetRouteTableAssociation
    - OpsWorksApp
    Metadata:
      Comment: OpsWorks instances require outbound Internet access. Using DependsOn
        to make sure outbound Internet Access is estlablished before creating instances
        in this layer.
    Properties:
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      CustomSecurityGroupIds:
      - Ref: OpsWorksSecurityGroup
      EnableAutoHealing: 'true'
      Name: MyPHPApp
      Shortname: php-app
      StackId:
        Ref: OpsWorksStack
      Type: php-app
    Type: AWS::OpsWorks::Layer
  OpsWorksSecurityGroup:
    Properties:
      GroupDescription: Allow inbound requests from the ELB to the OpsWorks instances
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: ELBSecurityGroup
        ToPort: '80'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  OpsWorksServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - Region2Principal
              - Ref: AWS::Region
              - OpsWorksPrincipal
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:*
            - iam:PassRole
            - cloudwatch:GetMetricStatistics
            - elasticloadbalancing:*
            Effect: Allow
            Resource: '*'
        PolicyName: opsworks-service
    Type: AWS::IAM::Role
  OpsWorksStack:
    Properties:
      DefaultInstanceProfileArn:
        Fn::GetAtt:
        - OpsWorksInstanceProfile
        - Arn
      DefaultSubnetId:
        Ref: PrivateSubnet
      Name:
        Ref: AWS::StackName
      ServiceRoleArn:
        Fn::GetAtt:
        - OpsWorksServiceRole
        - Arn
      VpcId:
        Ref: VPC
    Type: AWS::OpsWorks::Stack
  OutBoundPrivateNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: PrivateNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  OutboundPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PrivateNetworkAcl:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  PrivateRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NATDevice
      RouteTableId:
        Ref: PrivateRouteTable
    Type: AWS::EC2::Route
  PrivateRouteTable:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateSubnet:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Name
        Value: Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PrivateSubnetNetworkAclAssociation:
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      SubnetId:
        Ref: PrivateSubnet
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PrivateSubnetRouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicNetworkAcl:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PublicSubnet:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PublicSubnetNetworkAclAssociation:
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnetRouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    DependsOn: OpsWorksServiceRole
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
    Type: AWS::EC2::VPC
  VPCGatewayAttachment:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
