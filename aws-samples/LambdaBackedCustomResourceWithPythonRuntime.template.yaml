Description: This is a sample template for lambda-backed custom resource. Runtime
  for Lambda function is python
Outputs:
  Result:
    Value:
      Fn::GetAtt:
      - TestCustomResource
      - Result
Parameters:
  Base:
    Default: '10'
    Type: String
  CustomResourceId:
    Default: SomeCustomResourceId
    Type: String
Resources:
  TestCustomResource:
    Properties:
      Base:
        Ref: Base
      Id:
        Ref: CustomResourceId
      ServiceToken:
        Fn::GetAtt:
        - TestLambdaFunction
        - Arn
    Type: Custom::TestCustomResourceWithLambda
  TestLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - '*'
          - Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group
                - /aws/lambda/*
                - '*'
          Version: '2012-10-17'
        PolicyName: cwlogs
    Type: AWS::IAM::Role
  TestLambdaFunction:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - from __future__ import print_function
            - import json
            - import cfnresponse
            - print('Loading function')
            - 'def handler(event, context):'
            - '   base = event[''ResourceProperties''][''Base'']'
            - '   customId = event[''ResourceProperties''][''Id'']'
            - '   outputData = {}'
            - '   isInt = True'
            - '   try:'
            - '      int(base)'
            - '   except ValueError:'
            - '      isInt = False'
            - '   except Exception as e:'
            - '      print(e)'
            - '      cfnresponse.send(event, context, cfnresponse.FAILED, { ''error'':
              str(e) }, customId)'
            - '      return'
            - '   if event[''RequestType''] != ''Delete'' and isInt:'
            - '      outputData[''Result''] = int(base) * 5'
            - '   if event[''RequestType''] == ''Delete'' or isInt:'
            - '      cfnresponse.send(event, context, cfnresponse.SUCCESS, outputData,
              customId)'
            - '   else:'
            - '      cfnresponse.send(event, context, cfnresponse.FAILED, outputData,
              customId)'
      Handler: index.handler
      MemorySize: '256'
      Role:
        Fn::GetAtt:
        - TestLambdaExecutionRole
        - Arn
      Runtime: python2.7
      Timeout: '10'
    Type: AWS::Lambda::Function
