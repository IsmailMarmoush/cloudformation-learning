Description: This is a sample template for lambda-backed custom resource. Runtime
  for Lambda function is NodeJs
Outputs:
  Result:
    Value:
      Fn::GetAtt:
      - TestCustomResource
      - Result
Parameters:
  Base:
    Default: '10'
    Type: String
  CustomResourceId:
    Default: SomeCustomResourceId
    Type: String
Resources:
  TestCustomResource:
    Properties:
      Base:
        Ref: Base
      Id:
        Ref: CustomResourceId
      ServiceToken:
        Fn::GetAtt:
        - TestLambdaFunction
        - Arn
    Type: Custom::TestCustomResourceWithLambda
  TestLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - '*'
          - Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group
                - /aws/lambda/*
                - '*'
          Version: '2012-10-17'
        PolicyName: cwlogs
    Type: AWS::IAM::Role
  TestLambdaFunction:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - var response = require('cfn-response');
            - exports.handler = function(event, context) {
            - '    console.log(''Received event:'');'
            - '    console.log(JSON.stringify(event));'
            - '    var base = event.ResourceProperties.Base;'
            - '    var customId = event.ResourceProperties.Id;'
            - '    var outputData = {};'
            - '    try {'
            - '       if(event.RequestType != ''Delete'')'
            - '           outputData.Result = base*5;'
            - '       if(event.RequestType == ''Delete'' || outputData.Result == parseInt(outputData.Result,
              10))'
            - '           response.send(event, context, response.SUCCESS, outputData,
              customId);'
            - '       else'
            - '           response.send(event, context, response.FAILED, {}, customId);'
            - '    } catch (e) {'
            - '       console.error(e);'
            - '       response.send(event, context, response.FAILED, { ''error'':
              e }, customId);'
            - '       return'
            - '    }'
            - '}'
      Handler: index.handler
      MemorySize: '256'
      Role:
        Fn::GetAtt:
        - TestLambdaExecutionRole
        - Arn
      Runtime: nodejs4.3
      Timeout: '10'
    Type: AWS::Lambda::Function
