AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template ElasticBeanstalk_in_VPC: Sample template
  showing how to create an Elastic Beanstalk environment in a VPC. The stack contains
  2 subnets: the first subnet is public and contains the load balancer, a NAT device
  for internet access from the private subnet and a bastion host to allow SSH access
  to the Elastic Beanstalk hosts. The second subnet is private and contains the Elastic
  Beanstalk instances. You will be billed for the AWS resources used if you create
  a stack from this template.'
Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.small:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: PV64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    m1.large:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.small:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m3.2xlarge:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    t1.micro:
      Arch: NATPV64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSNATRegionArch2AMI:
    ap-northeast-1:
      NATHVM64: ami-2443b745
      NATPV64: ami-c7e016c7
    ap-northeast-2:
      NATHVM64: ami-d14388bf
      NATPV64: NOT_SUPPORTED
    ap-south-1:
      NATHVM64: ami-e2b9d38d
      NATPV64: NOT_SUPPORTED
    ap-southeast-1:
      NATHVM64: ami-a79b49c4
      NATPV64: ami-b098a9e2
    ap-southeast-2:
      NATHVM64: ami-53371f30
      NATPV64: ami-0fed9d35
    ca-central-1:
      NATHVM64: ami-32f14356
      NATPV64: NOT_SUPPORTED
    cn-north-1:
      NATHVM64: ami-7b549e16
      NATPV64: ami-bc3fad85
    eu-central-1:
      NATHVM64: ami-5825cd37
      NATPV64: ami-3604392b
    eu-west-1:
      NATHVM64: ami-a8dd45db
      NATPV64: ami-cb7de3bc
    eu-west-2:
      NATHVM64: ami-6b4d470f
      NATPV64: NOT_SUPPORTED
    sa-east-1:
      NATHVM64: ami-9336bcff
      NATPV64: ami-93fb408e
    us-east-1:
      NATHVM64: ami-4868ab25
      NATPV64: ami-c02b04a8
    us-east-2:
      NATHVM64: ami-92a6fef7
      NATPV64: NOT_SUPPORTED
    us-west-1:
      NATHVM64: ami-004b0f60
      NATPV64: ami-67a54423
    us-west-2:
      NATHVM64: ami-a275b1c2
      NATPV64: ami-2dae821d
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-374db956
      HVMG2: ami-d95aabbf
      PV64: ami-3e42b65f
    ap-northeast-2:
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-ffbdd790
      HVMG2: ami-f4cdb79b
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-a59b49c6
      HVMG2: ami-15660276
      PV64: ami-df9e4cbc
    ap-southeast-2:
      HVM64: ami-dc361ebf
      HVMG2: ami-0b5a4168
      PV64: ami-63351d00
    ca-central-1:
      HVM64: ami-730ebd17
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
      PV64: ami-77559f1a
    eu-central-1:
      HVM64: ami-ea26ce85
      HVMG2: ami-40b8102f
      PV64: ami-6527cf0a
    eu-west-1:
      HVM64: ami-f9dd458a
      HVMG2: ami-aedb26d7
      PV64: ami-4cdd453f
    eu-west-2:
      HVM64: ami-886369ec
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
      PV64: ami-1ad34676
    us-east-1:
      HVM64: ami-6869aa05
      HVMG2: ami-22b68b59
      PV64: ami-2a69aa47
    us-east-2:
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-31490d51
      HVMG2: ami-cfe5cfaf
      PV64: ami-a2490dc2
    us-west-2:
      HVM64: ami-7172b611
      HVMG2: ami-be4ea3c6
      PV64: ami-7f77b31f
  Region2Principal:
    ap-northeast-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-northeast-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-south-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-southeast-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ap-southeast-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    ca-central-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    cn-north-1:
      EC2Principal: ec2.amazonaws.com.cn
      OpsWorksPrincipal: opsworks.amazonaws.com.cn
    eu-central-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    eu-west-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    sa-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-east-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-west-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
    us-west-2:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
  SubnetConfig:
    Private:
      CIDR: 10.0.1.0/24
    Public:
      CIDR: 10.0.0.0/24
    VPC:
      CIDR: 10.0.0.0/16
Outputs:
  Bastion:
    Description: IP Address of the Bastion host
    Value:
      Ref: BastionIPAddress
  URL:
    Description: The URL of the Elastic Beanstalk environment
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - SampleEnvironment
          - EndpointURL
Parameters:
  BastionInstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: Bastion Host EC2 instance type
    Type: String
  BastionKeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the bastion
      host
    Type: AWS::EC2::KeyPair::KeyName
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Elastic
      Beanstalk hosts
    Type: AWS::EC2::KeyPair::KeyName
  NATInstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: NAT Device EC2 instance type
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    MaxLength: '18'
    MinLength: '9'
    Type: String
Resources:
  BastionHost:
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: BastionInstanceType
          - Arch
      InstanceType:
        Ref: BastionInstanceType
      KeyName:
        Ref: BastionKeyName
      SecurityGroupIds:
      - Ref: BastionSecurityGroup
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::Instance
  BastionIPAddress:
    DependsOn: GatewayToInternet
    Properties:
      Domain: vpc
      InstanceId:
        Ref: BastionHost
    Type: AWS::EC2::EIP
  BastionSecurityGroup:
    Properties:
      GroupDescription: Enable access to the Bastion host
      SecurityGroupEgress:
      - CidrIp:
          Fn::FindInMap:
          - SubnetConfig
          - Private
          - CIDR
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      SecurityGroupIngress:
      - CidrIp:
          Ref: SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  BeanstalkSecurityGroup:
    Properties:
      GroupDescription: Allow the Elastic Beanstalk instances to access the NAT device
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  GatewayToInternet:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
  InboundEphemeralPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '103'
    Type: AWS::EC2::NetworkAclEntry
  InboundHTTPPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  InboundHTTPSPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  InboundPrivateNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: PrivateNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  InboundSSHPublicNetworkAclEntry:
    Properties:
      CidrBlock:
        Ref: SSHLocation
      Egress: 'false'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  InternetGateway:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
    Type: AWS::EC2::InternetGateway
  NATDevice:
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSNATRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2NATArch
          - Ref: NATInstanceType
          - Arch
      InstanceType:
        Ref: NATInstanceType
      SecurityGroupIds:
      - Ref: NATSecurityGroup
      SourceDestCheck: 'false'
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::Instance
  NATIPAddress:
    DependsOn: GatewayToInternet
    Properties:
      Domain: vpc
      InstanceId:
        Ref: NATDevice
    Type: AWS::EC2::EIP
  NATSecurityGroup:
    Properties:
      GroupDescription: Enable internal access to the NAT device
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: BeanstalkSecurityGroup
        ToPort: '80'
      - FromPort: '443'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: BeanstalkSecurityGroup
        ToPort: '443'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  OutBoundPrivateNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: PrivateNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  OutboundPublicNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: PublicNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PrivateNetworkAcl:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  PrivateRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NATDevice
      RouteTableId:
        Ref: PrivateRouteTable
    Type: AWS::EC2::Route
  PrivateRouteTable:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateSubnet:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PrivateSubnetNetworkAclAssociation:
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      SubnetId:
        Ref: PrivateSubnet
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PrivateSubnetRouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicNetworkAcl:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  PublicRoute:
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PublicSubnet:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PublicSubnetNetworkAclAssociation:
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnetRouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
  SampleApplication:
    Properties:
      Description: AWS Elastic Beanstalk Python Sample Application
    Type: AWS::ElasticBeanstalk::Application
  SampleApplicationVersion:
    Properties:
      ApplicationName:
        Ref: SampleApplication
      Description: Version 1.0
      SourceBundle:
        S3Bucket:
          Fn::Join:
          - '-'
          - - elasticbeanstalk-samples
            - Ref: AWS::Region
        S3Key: python-sample.zip
    Type: AWS::ElasticBeanstalk::ApplicationVersion
  SampleEnvironment:
    Properties:
      ApplicationName:
        Ref: SampleApplication
      Description: AWS Elastic Beanstalk Environment running Python Sample Application
      OptionSettings:
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SSHSourceRestriction
        Value:
          Fn::Join:
          - ''
          - - tcp,22,22,
            - Ref: BastionSecurityGroup
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value:
          Ref: BeanstalkSecurityGroup
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value:
          Ref: KeyName
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value:
          Ref: VPC
      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value:
          Ref: PrivateSubnet
      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        Value:
          Ref: PublicSubnet
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value:
          Ref: WebServerInstanceProfile
      SolutionStackName: 64bit Amazon Linux 2015.03 v2.0.1 running Python 2.7
      VersionLabel:
        Ref: SampleApplicationVersion
    Type: AWS::ElasticBeanstalk::Environment
  VPC:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
    Type: AWS::EC2::VPC
  WebServerInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: WebServerRole
    Type: AWS::IAM::InstanceProfile
  WebServerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - Region2Principal
              - Ref: AWS::Region
              - EC2Principal
      Path: /
    Type: AWS::IAM::Role
  WebServerRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          NotAction: iam:*
          Resource: '*'
      PolicyName: WebServerRole
      Roles:
      - Ref: WebServerRole
    Type: AWS::IAM::Policy
